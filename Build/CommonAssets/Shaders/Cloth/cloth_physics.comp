#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x = 16, local_size_y = 16) in;

struct Particle
{
    Vector4 position;
    Vector4 prevPosition;
};

layout (binding = 0) buffer ParticleBuffer
{
    Particle particles[];
};

uniform float deltaTime;
uniform Vector3 gravity;
uniform float damping;
uniform int constraintIterations;

struct Sphere
{
    Vector4 position_radius;
};

layout (binding = 1) uniform SphereBuffer
{
    Sphere spheres[];
};

struct Capsule
{
    Vector4 start_radius;
    Vector4 end_radius;
};

layout (binding = 2) uniform CapsuleBuffer
{
    Capsule capsules[];
};

// Helper function to calculate the distance constraint between two particles
void satisfyDistanceConstraint(inout Particle p1, inout Particle p2, float restLength)
{
    Vector3 delta = p2.position.xyz - p1.position.xyz;
    float deltaLength = length(delta);
    float difference = (deltaLength - restLength) / deltaLength;

    Vector3 correction = delta * 0.5 * difference;
    p1.position.xyz -= correction;
    p2.position.xyz += correction;
}

void sphereCollision(inout Particle p, Sphere s)
{
    Vector3 delta = p.position.xyz - s.position_radius.xyz;
    float distance = length(delta);
    float radiusSum = p.position.w + s.position_radius.w;

    if (distance < radiusSum)
    {
        p.position.xyz += normalize(delta) * (radiusSum - distance);
    }
}

void capsuleCollision(inout Particle p, Capsule c)
{
    Vector3 line = c.end_radius.xyz - c.start_radius.xyz;
    Vector3 proj = dot(p.position.xyz - c.start_radius.xyz, line) / dot(line, line) * line;
    Vector3 closestPoint = c.start_radius.xyz + clamp(proj, Vector3(0.0), line);
    Vector3 delta = p.position.xyz - closestPoint;
    float distance = length(delta);
    float radiusSum = p.position.w + c.start_radius.w;

    if (distance < radiusSum)
    {
        p.position.xyz += normalize(delta) * (radiusSum - distance);
    }
}

void selfCollision(inout Particle p, Particle q)
{
    Vector3 delta = p.position.xyz - q.position.xyz;
    float distance = length(delta);
    float radiusSum = p.position.w + q.position.w;

    if (distance < radiusSum && distance > 0.0)
    {
        p.position.xyz += normalize(delta) * (radiusSum - distance) * 0.5;
    }
}

void main()
{
    // Get the global work item index
    iVector2 gid = iVector2(gl_GlobalInvocationID.xy);
    int index = gid.x + gid.y * 16;

    // Update particle positions using velocities and external forces (e.g., gravity)
    Particle p = particles[index];
    Vector3 velocity = (p.position.xyz - p.prevPosition.xyz) * damping;
    p.prevPosition = p.position;
    p.position.xyz += velocity + gravity * deltaTime;

    // Satisfy constraints (fixed top row of the cloth)
    if (gid.y == 0)
    {
        p.position.y = 0.0;
    }

    // Update the particle in the buffer
    particles[index] = p;

    // Synchronize threads to ensure all particles are updated
    barrier();

    // Iterate over all constraints and correct the predicted positions
    for (int i = 0; i < constraintIterations; i++)
    {
        if (gid.x > 0)
        {
            satisfyDistanceConstraint(particles[index], particles[index - 1], 1.0);
        }
        if (gid.y > 0)
        {
            satisfyDistanceConstraint(particles[index], particles[index - 16], 1.0);
        }

        // Sphere and capsule collision constraints
        for (int j = 0; j < spheres.length(); j++)
        {
            sphereCollision(particles[index], spheres[j]);
        }
        for (int j = 0; j < capsules.length(); j++)
        {
            capsuleCollision(particles[index], capsules[j]);
        }

        // Self-collision constraints
        for (int j = 0; j < particles.length(); j++)
        {
            if (j != index)
            {
                selfCollision(particles[index], particles[j]);
            }
        }
    }

    // Update velocities based on the corrected positions
    particles[index].prevPosition.xyz = p.position.xyz - velocity;
}