#version 450

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Particle
{
    vec3 position;
    vec3 prevPosition;
    vec3 endOffset;
    vec3 initLocalPosition;
    vec4 initLocalRotation;
    vec3 transformPosition;
    vec3 transformLocalPosition;
    mat4 transformLocalToWorldMatrix;
    float damping;
    float elasticity;
    float stiffness;
    float inert;
    float friction;
    float radius;
    float boneLength;
    bool isCollide;
    int parentIndex;
    int childCount;
};

struct ParticleTree
{
    vec3 localGravity;
    mat4 rootWorldToLocalMatrix;
    float boneTotalLength;
    Particle particles[];
    vec3 restGravity;
};

layout(std430, binding = 0) buffer ParticleTrees
{
    ParticleTree particleTrees[];
};

layout(std430, binding = 1) buffer EffectiveColliders
{
    vec4 colliders[];
};

uniform float deltaTime;
uniform float weight;
uniform vec3 gravity;
uniform vec3 force;
uniform float objectScale;
uniform vec3 objectMove;
uniform int updateMode;
uniform float updateRate;
uniform float blendWeight;
uniform int freezeAxis;
uniform bool distantDisable;
uniform vec3 referenceObjectPosition;
uniform float distanceToObject;

void main() 
{
    uint index = gl_GlobalInvocationID.x;
    ParticleTree pt = particleTrees[index];

    float timeVar = 1.0;
    int loop = 1;
    float dt = deltaTime;

    if (updateMode == 0)
    {
        // Default
        if (updateRate > 0.0)
            timeVar = dt * updateRate;
    }
    else if (updateRate > 0.0)
    {
        float frameTime = 1.0 / updateRate;
        float time = 0.0;
        loop = 0;

        while (time >= frameTime)
        {
            time -= frameTime;
            if (++loop >= 3)
            {
                time = 0.0;
                break;
            }
        }
    }

    if (loop > 0)
    {
        for (int i = 0; i < loop; ++i)
        {
            UpdateParticles1(pt, timeVar, i);
            UpdateParticles2(pt, timeVar);
        }
    }

    ApplyParticlesToTransforms(pt);
}

void UpdateParticles1(ParticleTree pt, float timeVar, int loopIndex)
{
    vec3 force = gravity;
    vec3 fdir = normalize(gravity);
    vec3 pf = fdir * max(dot(pt.restGravity, fdir), 0.0); // project current gravity to rest gravity
    force -= pf; // remove projected gravity
    force = (force + force) * (objectScale * timeVar);

    vec3 objectMove = loopIndex == 0 ? objectMove : vec3(0.0); // only first loop consider object move

    for (int i = 0; i < pt.particles.length(); ++i)
    {
        Particle p = pt.particles[i];
        if (p.parentIndex >= 0)
        {
            // verlet integration
            vec3 v = p.position - p.prevPosition;
            vec3 rmove = objectMove * p.inert;
            p.prevPosition = p.position + rmove;
            float damping = p.damping;
            if (p.isCollide)
            {
                damping += p.friction;
                if (damping > 1.0)
                    damping = 1.0;
                p.isCollide = false;
            }
            p.position += v * (1.0 - damping) + force + rmove;
        }
        else
        {
            p.prevPosition = p.position;
            p.position = p.transformPosition;
        }
    }
}

void UpdateParticles2(ParticleTree pt, float timeVar)
{
    for (int i = 1; i < pt.particles.length(); ++i)
    {
        Particle p = pt.particles[i];
        Particle p0 = pt.particles[p.parentIndex];

        float restLen = length(p0.transformPosition - p.transformPosition);

        // keep shape
        float stiffness = mix(1.0, p.stiffness, weight);
        if (stiffness > 0.0 || p.elasticity > 0.0)
        {
            mat4 m0 = p0.transformLocalToWorldMatrix;
            m0[3] = vec4(p0.position, 1.0);
            vec3 restPos = vec3(m0 * vec4(p.transformLocalPosition, 1.0));
            vec3 d = restPos - p.position;
            p.position += d * (p.elasticity * timeVar);

            if (stiffness > 0.0)
            {
                d = restPos - p.position;
                float len = length(d);
                float maxlen = restLen * (1.0 - stiffness) * 2.0;
                if (len > maxlen)
                    p.position += d * ((len - maxlen) / len);
            }
        }

        // collide
        if (p.radius > 0.0)
        {
            for (int j = 0; j < colliders.length(); ++j)
            {
                vec4 collider = colliders[j];
                vec3 cpos = collider.xyz;
                float crad = collider.w;
                vec3 d = p.position - cpos;
                float len = length(d);
                if (len < p.radius + crad)
                {
                    p.position = cpos + normalize(d) * (p.radius + crad);
                    p.isCollide = true;
                }
            }
        }

        // freeze axis, project to plane 
        if (freezeAxis != 0)
        {
            vec4 planeNormal = p0.transformLocalToWorldMatrix[freezeAxis - 1];
            vec3 movePlaneNormal = normalize(planeNormal.xyz);
            float distance = dot(movePlaneNormal, p.position - p0.position);
            p.position -= movePlaneNormal * distance;
        }

        // keep length
        vec3 dd = p0.position - p.position;
        float leng = length(dd);
        if (leng > 0.0)
            p.position += dd * ((leng - restLen) / leng);
    }
}

void ApplyParticlesToTransforms(ParticleTree pt)
{
    for (int i = 1; i < pt.particles.length(); ++i)
    {
        Particle p = pt.particles[i];
        Particle p0 = pt.particles[p.parentIndex];

        if (p0.childCount <= 1)
        {
            // do not modify bone orientation if has more than one child
            vec3 localPos = p.transformLocalPosition;
            vec3 v0 = vec3(p0.transformLocalToWorldMatrix * vec4(localPos, 1.0));
            vec3 v1 = p.position - p0.position;
            vec4 rot = rotationBetweenVectors(v0, v1);
            p0.transformLocalToWorldMatrix = mat4_cast(rot) * p0.transformLocalToWorldMatrix;
        }

        p.transformPosition = p.position;
    }
}

vec4 rotationBetweenVectors(vec3 start, vec3 dest)
{
    start = normalize(start);
    dest = normalize(dest);

    float cosTheta = dot(start, dest);
    vec3 rotationAxis;

    if (cosTheta < -1.0 + 0.001)
    {
        rotationAxis = cross(vec3(0.0, 0.0, 1.0), start);

        if (length(rotationAxis) < 0.01)
            rotationAxis = cross(vec3(1.0, 0.0, 0.0), start);

        rotationAxis = normalize(rotationAxis);
        return quat(180.0, rotationAxis);
    }

    rotationAxis = cross(start, dest);

    float s = sqrt((1.0 + cosTheta) * 2.0);
    float invs = 1.0 / s;

    return quat(
        s * 0.5,
        rotationAxis.x * invs,
        rotationAxis.y * invs,
        rotationAxis.z * invs
    );
}
