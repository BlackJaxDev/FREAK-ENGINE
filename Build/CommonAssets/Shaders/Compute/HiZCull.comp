#version 460

layout(std430, binding = 0) buffer ObjectData
{
    mat4 modelMatrices[];
    vec4 boundingSpheres[]; // xyz = center, w = radius
};

layout(binding = 1) uniform sampler2D hiZBuffer;

uniform mat4 viewProjectionMatrix;
uniform int hiZLevel; // Level of the Hi-Z buffer for culling

layout(std430, binding = 2) buffer CulledResults
{
    uint visibleIndices[];
};

layout(local_size_x = 256) in;

void main()
{
    uint id = gl_GlobalInvocationID.x;
    if (id >= boundingSpheres.length())
        return;

    // Transform bounding sphere center to clip space
    vec4 sphere = boundingSpheres[id];
    vec4 center = viewProjectionMatrix * vec4(sphere.xyz, 1.0);
    float radius = sphere.w;

    // Projected screen-space coordinates
    vec2 screenPos = center.xy / center.w * 0.5 + 0.5;
    vec2 screenSize = vec2(textureSize(hiZBuffer, hiZLevel));

    // Convert to Hi-Z texture coordinates
    ivec2 texCoord = ivec2(screenPos * screenSize);

    // Fetch Hi-Z depth at the selected mip level
    float maxDepth = texelFetch(hiZBuffer, texCoord, hiZLevel).r;

    // Perform occlusion test
    bool visible = center.z - radius < maxDepth;

    if (visible)
    {
        uint index = atomicAdd(visibleIndices[0], 1);
        visibleIndices[index + 1] = id;
    }
}