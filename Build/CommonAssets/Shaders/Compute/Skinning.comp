#version 450

layout(local_size_x = 256) in;

layout(std430, binding = 0) buffer BoneMatricesBuffer
{
    mat4 BoneMatrices [];
};

layout(std430, binding = 1) buffer BoneInvBindMatricesBuffer
{
    mat4 BoneInvBindMatrices [];
};

layout(std430, binding = 2) buffer BoneMatrixIndicesBuffer
{
    int BoneMatrixIndices [];
};

layout(std430, binding = 3) buffer BoneMatrixWeightsBuffer
{
    float BoneMatrixWeights [];
};

layout(std430, binding = 4) buffer PositionBuffer
{
    vec4 Positions [];
};

layout(std430, binding = 5) buffer NormalBuffer
{
    vec3 Normals [];
};

layout(std430, binding = 6) buffer TangentBuffer
{
    vec3 Tangents [];
};

layout(std430, binding = 7) buffer OutputPositionBuffer
{
    vec4 OutputPositions [];
};

layout(std430, binding = 8) buffer OutputNormalBuffer
{
    vec3 OutputNormals [];
};

layout(std430, binding = 9) buffer OutputTangentBuffer
{
    vec3 OutputTangents [];
};

uniform mat4 RootInvModelMatrix;

mat3 adjoint(mat4 m)
{
    return mat3(
        cross(m[1].xyz, m[2].xyz),
        cross(m[2].xyz, m[0].xyz),
        cross(m[0].xyz, m[1].xyz)
    );
}

void main()
{
    uint index = gl_GlobalInvocationID.x;

    vec4 basePosition = Positions[index];
    vec3 baseNormal = Normals[index];
    vec3 baseTangent = Tangents[index];

    vec4 finalPosition = vec4(0.0);
    vec3 finalNormal = vec3(0.0);
    vec3 finalTangent = vec3(0.0);

    for (int i = 0; i < 4; i++)
    {
        int boneIndex = BoneMatrixIndices[index * 4 + i];
        float weight = BoneMatrixWeights[index * 4 + i];
        mat4 boneMatrix = BoneInvBindMatrices[boneIndex] * BoneMatrices[boneIndex] * RootInvModelMatrix;

        finalPosition += (boneMatrix * basePosition) * weight;
        mat3 boneMatrix3 = adjoint(boneMatrix);
        finalNormal += (boneMatrix3 * baseNormal) * weight;
        finalTangent += (boneMatrix3 * baseTangent) * weight;
    }

    OutputPositions[index] = finalPosition;
    OutputNormals[index] = normalize(finalNormal);
    OutputTangents[index] = normalize(finalTangent);
}
